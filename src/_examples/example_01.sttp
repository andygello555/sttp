set object = {
    "repeats": 30,
    "null": null,
    "false": false,
    "true": true,
    "pi": 3.142,
    "object": {
        "hello": "world!",
        "array": [
            1,
            1 + 1,
            1 + 1 + 1
        ]
    },
    "methodcall": GET("https://example.com"),
    "results": []
};

// Object Functions
// Self can be used to access the functions within the bound object
function object.execute(self.ifvar, self.var_ifwithin_self, party_variable.wow[0].a_a[0])
    // Parameters are JSON paths which fill sparsely fill a JSON object that can be passed into the function */
    for set i = 0; i < self.repeats; set i = i + 1 do
        if i % 3 == 0 then
            set self.results = self.results + GET("https://google.com");;;;
            if true then
                print(("hello" + "world")+"!");
            elif true then
                print("still true");
            else
                print("hello");print("hello 2");print("hello 3");
                test "hello" == "hel" + "lo";
            end;
        elif i % 5 == 0 then
            set self.results = self.results + GET("https://twitter.com");
        elif i % 7 == 0 then
            set self.results = self.results + GET("https://reddit.com");
        else
            set self.results = self.results + GET("https://facebook.com");
        end;
    end;
    return "wow!";
end;

// Here we show three new statements:
// - Try-catch: try do ... catch as var then ... end, catches any exceptions that might occur in the "try" block
// - Batch: executes the inner block twice:
//   1. A copy of the heap is made
//   2. First time is without executing any HTTP requests and instead adding them to a work queue
//   3. Then all requests in the work queue are executed in parallel. The results are loaded into another queue in the
//      order they were added to the work queue
//   4. The heap is restored to the copy that was made in step 1
//   5. Second time run through of the block now uses the next response in the queue rather than executing the HTTP
//      request in sequence
// - For-each: iterate over the elements in an object/array/string
try this
    batch this
        for url in [
            "https://a.com",
            "https://b.com",
            "https://c.com"
        ] do
            set result = GET(url);
            print(result);
        end;
        set oops_forgot_this = GET("https://d.com");
        print(oops_forgot_this);
    end;
    throw {"error": "time", "ohno": true};
catch as err then
    print(err);
end;

set this_boy = "to be this boy";

// Same thing again but on one line
try this batch this for url in ["https://a.com","https://b.com","https://c.com"] do set result = GET(url);print(result);end;set oops_forgot_this = GET("https://d.com");print(oops_forgot_this);end;throw {"error": "time", "ohno": true};catch as err then print(err);end;

object.execute();

test object.results == 1 + 1 + 2;
